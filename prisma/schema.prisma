generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Product {
  id            String             @id @default(uuid())
  name          String
  description   String
  price         Float
  stock         Int
  images        String[]
  category      String
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
  discount      Int?
  featured      Boolean            @default(false)
  isNew         Boolean            @default(false)
  originalPrice Float?
  sku           String             @unique
  cartItems     CartItem[]
  orderItems    OrderItem[]
  analytics     ProductAnalytics[]
  reviews       Review[]
  wishlistItems WishlistItem[]
}

model User {
  id             String          @id @default(uuid())
  name           String
  email          String          @unique
  password       String?
  isAdmin        Boolean         @default(false)
  avatar         String?
  address        Json?
  phone          String?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  accounts       Account[]
  addresses      Address[]
  cartItems      CartItem[]
  notifications  Notification[]
  orders         Order[]
  paymentMethods PaymentMethod[]
  reviews        Review[]
  sessions       Session[]
  analytics      UserAnalytics[]
  wishlistItems  WishlistItem[]
  welcomeSent    Boolean?        @default(false)
}

model Order {
  id              String          @id @default(uuid())
  userId          String
  status          String          @default("pending")
  isPaid          Boolean         @default(false)
  isDelivered     Boolean         @default(false)
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  totalAmount     Float?
  shippingAddress Json?
  paidAt          DateTime?
  paymentId       String?
  paymentMethod   String?
  user            User            @relation(fields: [userId], references: [id])
  analytics       OrderAnalytics?
  items           OrderItem[]
}

model OrderItem {
  id        String  @id @default(uuid())
  orderId   String
  productId String
  quantity  Int
  price     Float
  order     Order   @relation(fields: [orderId], references: [id])
  product   Product @relation(fields: [productId], references: [id])
}

model Review {
  id        String   @id @default(uuid())
  productId String
  userId    String
  rating    Int
  comment   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  product   Product  @relation(fields: [productId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([productId, userId])
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  type      String
  title     String
  message   String
  data      Json?
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([isRead])
  @@index([createdAt])
}

model ProductAnalytics {
  id        String   @id @default(uuid())
  productId String
  views     Int      @default(0)
  sales     Int      @default(0)
  revenue   Float    @default(0)
  date      DateTime @default(now())
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([productId, date])
  @@index([date])
}

model UserAnalytics {
  id      String   @id @default(uuid())
  userId  String
  visits  Int      @default(0)
  orders  Int      @default(0)
  revenue Float    @default(0)
  date    DateTime @default(now())
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, date])
  @@index([date])
}

model OrderAnalytics {
  id          String   @id @default(uuid())
  orderId     String   @unique
  totalAmount Float
  itemsCount  Int
  date        DateTime @default(now())
  order       Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@index([date])
}

model SiteAnalytics {
  id             String   @id @default(uuid())
  date           DateTime @unique @default(now())
  pageViews      Int      @default(0)
  uniqueVisitors Int      @default(0)
  orders         Int      @default(0)
  revenue        Float    @default(0)
  conversionRate Float    @default(0)

  @@index([date])
}

model CartItem {
  id        String   @id @default(uuid())
  userId    String
  productId String
  quantity  Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  product   Product  @relation(fields: [productId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model WishlistItem {
  id        String   @id @default(uuid())
  userId    String
  productId String
  addedAt   DateTime @default(now())
  product   Product  @relation(fields: [productId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, productId])
}

model PaymentMethod {
  id                    String   @id @default(uuid())
  userId                String
  type                  String
  brand                 String?
  last4                 String?
  expMonth              Int?
  expYear               Int?
  stripePaymentMethodId String?
  isDefault             Boolean  @default(false)
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  user                  User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Address {
  id            String   @id @default(uuid())
  alias         String
  recipientName String
  street        String
  city          String
  state         String
  zipCode       String
  country       String
  phone         String
  isDefault     Boolean  @default(false)
  userId        String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
