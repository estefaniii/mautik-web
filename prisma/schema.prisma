// Prisma schema for Neon (PostgreSQL)
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Product {
  id            String   @id @default(uuid())
  name          String
  description   String
  price         Float
  originalPrice Float?
  stock         Int
  images        String[]
  category      String
  sku           String   @unique
  featured      Boolean  @default(false)
  isNew         Boolean  @default(false)
  discount      Int?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  orderItems    OrderItem[]
  reviews       Review[]
  analytics     ProductAnalytics[]
  cartItems     CartItem[]
  wishlistItems WishlistItem[]
}

model User {
  id            String         @id @default(uuid())
  name          String
  email         String         @unique
  password      String
  isAdmin       Boolean        @default(false)
  avatar        String?
  address       Json?
  phone         String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  orders        Order[]
  reviews       Review[]
  notifications Notification[]
  analytics     UserAnalytics[]
  cartItems     CartItem[]
  wishlistItems WishlistItem[]
  paymentMethods PaymentMethod[]
  addresses     Address[]
}

model Order {
  id          String      @id @default(uuid())
  user        User        @relation(fields: [userId], references: [id])
  userId      String
  items       OrderItem[]
  status      String      @default("pending")
  isPaid      Boolean     @default(false)
  isDelivered Boolean     @default(false)
  totalAmount Float?
  shippingAddress Json?
  paymentMethod String?   // 'paypal', 'card', etc.
  paymentId     String?   // ID de la transacción (PayPal, Stripe, etc.)
  paidAt        DateTime? // Fecha/hora de pago
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  analytics   OrderAnalytics[]
}

model OrderItem {
  id        String   @id @default(uuid())
  order     Order    @relation(fields: [orderId], references: [id])
  orderId   String
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  quantity  Int
  price     Float    // Precio al momento de la compra
}

model Review {
  id        String   @id @default(uuid())
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  rating    Int
  comment   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([productId, userId]) // Solo una reseña por usuario por producto
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  type      String   // 'order', 'product', 'user', 'system'
  title     String
  message   String
  data      Json?    // Datos adicionales como orderId, productId, etc.
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([isRead])
  @@index([createdAt])
}

// Analytics Models
model ProductAnalytics {
  id          String   @id @default(uuid())
  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId   String
  views       Int      @default(0)
  sales       Int      @default(0)
  revenue     Float    @default(0)
  date        DateTime @default(now())
  
  @@unique([productId, date])
  @@index([date])
}

model UserAnalytics {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  visits    Int      @default(0)
  orders    Int      @default(0)
  revenue   Float    @default(0)
  date      DateTime @default(now())
  
  @@unique([userId, date])
  @@index([date])
}

model OrderAnalytics {
  id        String   @id @default(uuid())
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId   String
  totalAmount Float
  itemsCount Int
  date      DateTime @default(now())
  
  @@unique([orderId])
  @@index([date])
}

model SiteAnalytics {
  id          String   @id @default(uuid())
  date        DateTime @default(now())
  pageViews   Int      @default(0)
  uniqueVisitors Int   @default(0)
  orders      Int      @default(0)
  revenue     Float    @default(0)
  conversionRate Float @default(0)
  
  @@unique([date])
  @@index([date])
}

model CartItem {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  quantity  Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model WishlistItem {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  addedAt   DateTime @default(now())

  @@unique([userId, productId]) // Un usuario solo puede tener un producto una vez en su wishlist
}

model PaymentMethod {
  id          String   @id @default(uuid())
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  type        String   // 'card', 'paypal', etc.
  brand       String?  // Visa, Mastercard, etc.
  last4       String?  // Últimos 4 dígitos
  expMonth    Int?
  expYear     Int?
  stripePaymentMethodId String? // ID de Stripe si se usa Stripe
  isDefault   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([userId])
}

model Address {
  id            String   @id @default(uuid())
  alias         String   // Ej: Casa, Oficina
  recipientName String   // Nombre del destinatario
  street        String
  city          String
  state         String
  zipCode       String
  country       String
  phone         String
  isDefault     Boolean  @default(false)
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([userId])
}
