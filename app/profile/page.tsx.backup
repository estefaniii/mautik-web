"use client"

import { useState, useEffect, useRef } from "react"
import { useAuth } from "@/context/auth-context"
import { useFavorites } from "@/context/favorites-context"
import { useTheme } from "@/context/theme-context"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar"
import { Separator } from "@/components/ui/separator"
import { Badge } from "@/components/ui/badge"
import { Switch } from "@/components/ui/switch"
import { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle, DialogTrigger } from "@/components/ui/dialog"
import { 
  User, 
  Mail, 
  Phone, 
  MapPin, 
  Edit, 
  Save, 
  X, 
  ShoppingBag, 
  Heart, 
  Settings,
  Shield,
  Calendar,
  Lock,
  Bell,
  Trash2,
  Camera,
  Eye,
  EyeOff,
  CheckCircle,
  AlertCircle,
  Package,
  Star,
  CreditCard,
  LogOut,
  Moon,
  Sun,
  Pencil,
  Home
} from "lucide-react"
import { useToast } from "@/hooks/use-toast"
import AuthGuard from "@/components/auth-guard"
import Link from "next/link"
import ProductCard from "@/components/product-card"
import ProfileAvatar from "@/components/profile-avatar"
import AddressForm, { Address } from "@/components/address-form";

interface UserSettings {
  emailNotifications: boolean
  smsNotifications: boolean
  marketingEmails: boolean
  orderUpdates: boolean
  darkMode: boolean
}

function PaymentMethodList() {
  const [methods, setMethods] = useState<any[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [showAdd, setShowAdd] = useState(false);
  const [editId, setEditId] = useState<string | null>(null);
  const [form, setForm] = useState({
    type: "card",
    brand: "Visa",
    last4: "",
    expMonth: "",
    expYear: "",
    isDefault: false,
  });
  const [saving, setSaving] = useState(false);
  const [formError, setFormError] = useState<string | null>(null);
  const [deletingId, setDeletingId] = useState<string | null>(null);

  const fetchMethods = async () => {
    setLoading(true);
    setError(null);
    try {
      const res = await fetch("/api/payment-methods");
      if (!res.ok) throw new Error("Error al cargar métodos de pago");
      const data = await res.json();
      setMethods(data);
    } catch (err: any) {
      setError(err.message || "Error desconocido");
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => { fetchMethods(); }, []);

  const handleOpen = () => {
    setForm({ type: "card", brand: "Visa", last4: "", expMonth: "", expYear: "", isDefault: false });
    setFormError(null);
    setEditId(null);
    setShowAdd(true);
  };

  const handleEdit = (m: any) => {
    setForm({
      type: m.type || "card",
      brand: m.brand || "Visa",
      last4: m.last4 || "",
      expMonth: m.expMonth ? String(m.expMonth) : "",
      expYear: m.expYear ? String(m.expYear) : "",
      isDefault: !!m.isDefault,
    });
    setFormError(null);
    setEditId(m.id);
    setShowAdd(true);
  };

  const handleDelete = async (id: string) => {
    if (!window.confirm("¿Seguro que deseas eliminar este método de pago?")) return;
    setDeletingId(id);
    try {
      const res = await fetch(`/api/payment-methods/${id}`, { method: "DELETE" });
      if (!res.ok) throw new Error("Error al eliminar método de pago");
      await fetchMethods();
    } catch (err: any) {
      alert(err.message || "Error desconocido");
    } finally {
      setDeletingId(null);
    }
  };

  const handleSetDefault = async (id: string) => {
    setSaving(true);
    try {
      const res = await fetch(`/api/payment-methods/${id}`, {
        method: "PUT",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ isDefault: true }),
      });
      if (!res.ok) throw new Error("Error al marcar como principal");
      await fetchMethods();
    } catch (err: any) {
      alert(err.message || "Error desconocido");
    } finally {
      setSaving(false);
    }
  };

  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>) => {
    setForm({ ...form, [e.target.name]: e.target.value });
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setFormError(null);
    // Validación básica
    if (!form.last4.match(/^\d{4}$/)) {
      setFormError("Los últimos 4 dígitos deben ser 4 números");
      return;
    }
    if (!form.expMonth.match(/^\d{1,2}$/) || +form.expMonth < 1 || +form.expMonth > 12) {
      setFormError("Mes inválido");
      return;
    }
    if (!form.expYear.match(/^\d{2,4}$/)) {
      setFormError("Año inválido");
      return;
    }
    setSaving(true);
    try {
      if (editId) {
        // Editar
        const res = await fetch(`/api/payment-methods/${editId}`, {
          method: "PUT",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({
            type: form.type,
            brand: form.brand,
            last4: form.last4,
            expMonth: +form.expMonth,
            expYear: +form.expYear,
            isDefault: form.isDefault,
          }),
        });
        if (!res.ok) throw new Error("Error al editar método de pago");
      } else {
        // Crear
        const res = await fetch("/api/payment-methods", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({
            type: form.type,
            brand: form.brand,
            last4: form.last4,
            expMonth: +form.expMonth,
            expYear: +form.expYear,
            isDefault: form.isDefault,
          }),
        });
        if (!res.ok) throw new Error("Error al guardar método de pago");
      }
      setShowAdd(false);
      setEditId(null);
      await fetchMethods();
    } catch (err: any) {
      setFormError(err.message || "Error desconocido");
    } finally {
      setSaving(false);
    }
  };

  if (loading) return <div className="text-gray-500">Cargando métodos de pago...</div>;
  if (error) return <div className="text-red-500">{error}</div>;
  return (
    <>
      <Dialog open={showAdd} onOpenChange={setShowAdd}>
        <DialogTrigger asChild>
          <Button className="bg-indigo-600 hover:bg-indigo-700" onClick={handleOpen}>Agregar método</Button>
        </DialogTrigger>
        <DialogContent>
          <DialogHeader>
            <DialogTitle>{editId ? "Editar método de pago" : "Agregar método de pago"}</DialogTitle>
            <DialogDescription>Ingresa los datos de tu tarjeta</DialogDescription>
          </DialogHeader>
          <form onSubmit={handleSubmit} className="space-y-4">
            <div>
              <label className="block text-sm font-medium mb-1">Tipo</label>
              <select name="brand" value={form.brand} onChange={handleChange} className="w-full border rounded px-3 py-2">
                <option value="Visa">Visa</option>
                <option value="Mastercard">Mastercard</option>
                <option value="Amex">Amex</option>
                <option value="Discover">Discover</option>
              </select>
            </div>
            <div>
              <label className="block text-sm font-medium mb-1">Últimos 4 dígitos</label>
              <Input name="last4" maxLength={4} value={form.last4} onChange={handleChange} required pattern="\d{4}" />
            </div>
            <div className="flex gap-2">
              <div className="flex-1">
                <label className="block text-sm font-medium mb-1">Mes</label>
                <Input name="expMonth" maxLength={2} value={form.expMonth} onChange={handleChange} required pattern="\d{1,2}" />
              </div>
              <div className="flex-1">
                <label className="block text-sm font-medium mb-1">Año</label>
                <Input name="expYear" maxLength={4} value={form.expYear} onChange={handleChange} required pattern="\d{2,4}" />
              </div>
            </div>
            <div className="flex items-center gap-2 mt-2">
              <input type="checkbox" name="isDefault" checked={form.isDefault} onChange={e => setForm(f => ({ ...f, isDefault: e.target.checked }))} />
              <span>Usar como método principal</span>
            </div>
            {formError && <div className="text-red-500 text-sm">{formError}</div>}
            <DialogFooter>
              <Button type="submit" className="bg-indigo-600 hover:bg-indigo-700 w-full" disabled={saving}>{saving ? (editId ? "Guardando..." : "Guardando...") : (editId ? "Guardar cambios" : "Guardar")}</Button>
            </DialogFooter>
          </form>
        </DialogContent>
      </Dialog>
      <div className="space-y-4 mt-4">
        {methods.length === 0 ? (
          <div className="text-gray-500">No tienes métodos de pago guardados.</div>
        ) : (
          methods.map((m) => (
            <div key={m.id} className={`flex items-center justify-between border rounded-lg p-4 ${m.isDefault ? 'border-indigo-600 bg-indigo-50' : 'border-gray-200 bg-white'}`}>
              <div className="flex items-center gap-4">
                <CreditCard className="h-6 w-6 text-indigo-600" />
                <div>
                  <div className="font-semibold text-gray-900">{m.brand ? `${m.brand} •••• ${m.last4}` : m.type}</div>
                  <div className="text-xs text-gray-500">Expira {m.expMonth ? `${m.expMonth}/${m.expYear}` : '-'}</div>
                </div>
              </div>
              <div className="flex items-center gap-2">
                {m.isDefault ? (
                  <span className="text-xs px-2 py-1 rounded bg-indigo-600 text-white ml-2">Default</span>
                ) : (
                  <Button size="sm" variant="outline" onClick={() => handleSetDefault(m.id)} disabled={saving}>Marcar como principal</Button>
                )}
                <Button size="icon" variant="ghost" onClick={() => handleEdit(m)} title="Editar"><Pencil className="h-4 w-4" /></Button>
                <Button size="icon" variant="ghost" onClick={() => handleDelete(m.id)} title="Eliminar" disabled={deletingId === m.id}><Trash2 className="h-4 w-4 text-red-500" /></Button>
              </div>
            </div>
          ))
        )}
      </div>
    </>
  );
}

function AddressList() {
  const [addresses, setAddresses] = useState<any[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [showDialog, setShowDialog] = useState(false);
  const [editId, setEditId] = useState<string | null>(null);
  const [form, setForm] = useState({
    alias: "",
    recipientName: "",
    street: "",
    city: "",
    state: "",
    zipCode: "",
    country: "",
    phone: "",
    isDefault: false,
  });
  const [saving, setSaving] = useState(false);
  const [formError, setFormError] = useState<string | null>(null);
  const [deletingId, setDeletingId] = useState<string | null>(null);
  const [fieldErrors, setFieldErrors] = useState<any>({});
  const { toast } = useToast();
  const aliasRef = useRef<HTMLInputElement>(null);

  const fetchAddresses = async () => {
    setLoading(true);
    setError(null);
    try {
      const res = await fetch("/api/addresses");
      if (!res.ok) throw new Error("Error al cargar direcciones");
      const data = await res.json();
      setAddresses(data);
    } catch (err: any) {
      setError(err.message || "Error desconocido");
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => { fetchAddresses(); }, []);

  useEffect(() => {
    if (showDialog && aliasRef.current) {
      setTimeout(() => aliasRef.current?.focus(), 100);
    }
    if (!showDialog) {
      setForm({ alias: "", recipientName: "", street: "", city: "", state: "", zipCode: "", country: "", phone: "", isDefault: false });
      setFieldErrors({});
      setFormError(null);
      setEditId(null);
    }
  }, [showDialog]);

  const handleOpen = () => {
    setForm({ alias: "", recipientName: "", street: "", city: "", state: "", zipCode: "", country: "", phone: "", isDefault: false });
    setFormError(null);
    setFieldErrors({});
    setEditId(null);
    setShowDialog(true);
  };

  const handleEdit = (a: any) => {
    setForm({
      alias: a.alias || "",
      recipientName: a.recipientName || "",
      street: a.street || "",
      city: a.city || "",
      state: a.state || "",
      zipCode: a.zipCode || "",
      country: a.country || "",
      phone: a.phone || "",
      isDefault: !!a.isDefault,
    });
    setFormError(null);
    setFieldErrors({});
    setEditId(a.id);
    setShowDialog(true);
  };

  const handleDelete = async (id: string) => {
    if (!window.confirm("¿Seguro que deseas eliminar esta dirección?")) return;
    setDeletingId(id);
    try {
      const res = await fetch(`/api/addresses/${id}`, { method: "DELETE" });
      if (!res.ok) throw new Error("Error al eliminar dirección");
      await fetchAddresses();
      toast({ title: "Dirección eliminada", description: "La dirección fue eliminada correctamente.", variant: "default" });
    } catch (err: any) {
      toast({ title: "Error", description: err.message || "Error desconocido", variant: "destructive" });
    } finally {
      setDeletingId(null);
    }
  };

  const handleSetDefault = async (id: string) => {
    setSaving(true);
    try {
      const res = await fetch(`/api/addresses/${id}`, { method: "PATCH" });
      if (!res.ok) throw new Error("Error al marcar como principal");
      await fetchAddresses();
      toast({ title: "Dirección principal", description: "Dirección marcada como principal.", variant: "default" });
    } catch (err: any) {
      toast({ title: "Error", description: err.message || "Error desconocido", variant: "destructive" });
    } finally {
      setSaving(false);
    }
  };

  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setForm({ ...form, [e.target.name]: e.target.value });
    setFieldErrors((prev: any) => ({ ...prev, [e.target.name]: undefined }));
  };

  const validateFields = () => {
    const errors: any = {};
    if (!form.alias.trim()) errors.alias = "Alias requerido";
    if (!form.recipientName.trim()) errors.recipientName = "Nombre requerido";
    if (!form.street.trim()) errors.street = "Calle requerida";
    if (!form.city.trim()) errors.city = "Ciudad requerida";
    if (!form.state.trim()) errors.state = "Provincia/Estado requerido";
    if (!form.zipCode.trim()) errors.zipCode = "Código postal requerido";
    else if (!/^[A-Za-z0-9\-\s]{3,10}$/.test(form.zipCode.trim())) errors.zipCode = "Código postal inválido";
    if (!form.country.trim()) errors.country = "País requerido";
    if (!form.phone.trim()) errors.phone = "Teléfono requerido";
    else if (!/^\+?[0-9\s\-()]{7,20}$/.test(form.phone.trim())) errors.phone = "Teléfono inválido";
    return errors;
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setFormError(null);
    const errors = validateFields();
    setFieldErrors(errors);
    if (Object.keys(errors).length > 0) return;
    setSaving(true);
    try {
      if (editId) {
        // Editar
        const res = await fetch(`/api/addresses/${editId}`, {
          method: "PUT",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ ...form }),
        });
        if (!res.ok) throw new Error("Error al editar dirección");
        toast({ title: "Dirección actualizada", description: "La dirección fue actualizada correctamente.", variant: "default" });
      } else {
        // Crear
        const res = await fetch("/api/addresses", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ ...form }),
        });
        if (!res.ok) throw new Error("Error al guardar dirección");
        toast({ title: "Dirección guardada", description: "La dirección fue guardada correctamente.", variant: "default" });
      }
      setShowDialog(false);
      setEditId(null);
      await fetchAddresses();
    } catch (err: any) {
      setFormError(err.message || "Error desconocido");
      toast({ title: "Error", description: err.message || "Error desconocido", variant: "destructive" });
    } finally {
      setSaving(false);
    }
  };

  if (loading) return <div className="text-gray-500">Cargando direcciones...</div>;
  if (error) return <div className="text-red-500">{error}</div>;
  return (
    <>
      <Dialog open={showDialog} onOpenChange={setShowDialog}>
        <DialogTrigger asChild>
          <Button className="bg-indigo-600 hover:bg-indigo-700" onClick={handleOpen}>Agregar dirección</Button>
        </DialogTrigger>
        <DialogContent>
          <DialogHeader>
            <DialogTitle>{editId ? "Editar dirección" : "Agregar dirección"}</DialogTitle>
            <DialogDescription>Completa los datos de tu dirección</DialogDescription>
          </DialogHeader>
          <form onSubmit={handleSubmit} className="space-y-4">
            <div>
              <label className="block text-sm font-medium mb-1">Alias</label>
              <Input ref={aliasRef} name="alias" value={form.alias} onChange={handleChange} required />
              {fieldErrors.alias && <div className="text-red-500 text-xs mt-1">{fieldErrors.alias}</div>}
            </div>
            <div>
              <label className="block text-sm font-medium mb-1">Nombre del destinatario</label>
              <Input name="recipientName" value={form.recipientName} onChange={handleChange} required />
              {fieldErrors.recipientName && <div className="text-red-500 text-xs mt-1">{fieldErrors.recipientName}</div>}
            </div>
            <div>
              <label className="block text-sm font-medium mb-1">Calle</label>
              <Input name="street" value={form.street} onChange={handleChange} required />
              {fieldErrors.street && <div className="text-red-500 text-xs mt-1">{fieldErrors.street}</div>}
            </div>
            <div className="flex gap-2">
              <div className="flex-1">
                <label className="block text-sm font-medium mb-1">Ciudad</label>
                <Input name="city" value={form.city} onChange={handleChange} required />
                {fieldErrors.city && <div className="text-red-500 text-xs mt-1">{fieldErrors.city}</div>}
              </div>
              <div className="flex-1">
                <label className="block text-sm font-medium mb-1">Provincia/Estado</label>
                <Input name="state" value={form.state} onChange={handleChange} required />
                {fieldErrors.state && <div className="text-red-500 text-xs mt-1">{fieldErrors.state}</div>}
              </div>
            </div>
            <div className="flex gap-2">
              <div className="flex-1">
                <label className="block text-sm font-medium mb-1">Código Postal</label>
                <Input name="zipCode" value={form.zipCode} onChange={handleChange} required />
                {fieldErrors.zipCode && <div className="text-red-500 text-xs mt-1">{fieldErrors.zipCode}</div>}
              </div>
              <div className="flex-1">
                <label className="block text-sm font-medium mb-1">País</label>
                <Input name="country" value={form.country} onChange={handleChange} required />
                {fieldErrors.country && <div className="text-red-500 text-xs mt-1">{fieldErrors.country}</div>}
              </div>
            </div>
            <div>
              <label className="block text-sm font-medium mb-1">Teléfono</label>
              <Input name="phone" value={form.phone} onChange={handleChange} required />
              {fieldErrors.phone && <div className="text-red-500 text-xs mt-1">{fieldErrors.phone}</div>}
            </div>
            <div className="flex items-center gap-2 mt-2">
              <input type="checkbox" name="isDefault" checked={form.isDefault} onChange={e => setForm(f => ({ ...f, isDefault: e.target.checked }))} />
              <span>Usar como dirección principal</span>
            </div>
            {formError && <div className="text-red-500 text-sm">{formError}</div>}
            <DialogFooter>
              <Button type="submit" className="bg-indigo-600 hover:bg-indigo-700 w-full flex items-center justify-center" disabled={saving}>
                {saving && <span className="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></span>}
                {saving ? (editId ? "Guardando..." : "Guardando...") : (editId ? "Guardar cambios" : "Guardar")}
              </Button>
            </DialogFooter>
          </form>
        </DialogContent>
      </Dialog>
      <div className="space-y-4 mt-4">
        {addresses.length === 0 ? (
          <div className="text-gray-500">No tienes direcciones guardadas.</div>
        ) :
          addresses.map((a) => (
            <div key={a.id} className={`flex items-center justify-between border rounded-lg p-4 ${a.isDefault ? 'border-indigo-700 bg-gradient-to-r from-indigo-50 to-purple-50 shadow-lg' : 'border-gray-200 bg-white'}`}>
              <div className="flex items-center gap-4">
                <Home className={`h-6 w-6 ${a.isDefault ? 'text-indigo-700' : 'text-indigo-600'}`} />
                <div>
                  <div className="font-semibold text-gray-900 flex items-center">{a.alias} <span className="text-xs text-gray-500 ml-2">({a.recipientName})</span> {a.isDefault && <span className="ml-2 text-xs px-2 py-1 rounded bg-indigo-700 text-white flex items-center gap-1"><Star className="h-3 w-3" /> Principal</span>}</div>
                  <div className="text-xs text-gray-500">{a.street}, {a.city}, {a.state}, {a.zipCode}, {a.country}</div>
                  <div className="text-xs text-gray-500">Tel: {a.phone}</div>
                </div>
              </div>
              <div className="flex items-center gap-2">
                {!a.isDefault && <Button size="sm" variant="outline" onClick={() => handleSetDefault(a.id)} disabled={saving}>Marcar como principal</Button>}
                <Button size="icon" variant="ghost" onClick={() => handleEdit(a)} title="Editar"><Edit className="h-4 w-4" /></Button>
                <Button size="icon" variant="ghost" onClick={() => handleDelete(a.id)} title="Eliminar" disabled={deletingId === a.id}><Trash2 className="h-4 w-4 text-red-500" /></Button>
              </div>
            </div>
          ))
        }
      </div>
    </>
  );
}

export default function ProfilePage() {
  const { user, isLoading, logout, updateProfile } = useAuth()
  const { favorites, getFavoriteProducts } = useFavorites()
  const { isDarkMode, toggleDarkMode } = useTheme()
  const { toast } = useToast()
  
  // Profile editing states
  const [isEditing, setIsEditing] = useState(false)
  const [isChangingPassword, setIsChangingPassword] = useState(false)
  const [showDeleteDialog, setShowDeleteDialog] = useState(false)
  const [showPasswordDialog, setShowPasswordDialog] = useState(false)
  
  // Form states
  const [editForm, setEditForm] = useState({
    name: "",
    email: "",
    phone: "",
    address: {
      street: "",
      city: "",
      state: "",
      zipCode: "",
      country: ""
    }
  })
  
  const [passwordForm, setPasswordForm] = useState({
    currentPassword: "",
    newPassword: "",
    confirmPassword: ""
  })
  
  const [settings, setSettings] = useState<UserSettings>({
    emailNotifications: true,
    smsNotifications: false,
    marketingEmails: true,
    orderUpdates: true,
    darkMode: isDarkMode
  })
  
  const [showPassword, setShowPassword] = useState({
    current: false,
    new: false,
    confirm: false
  })

  const [orders, setOrders] = useState<any[]>([]);
  const [loadingOrders, setLoadingOrders] = useState(false);
  const [isSaving, setIsSaving] = useState(false)
  const [phoneError, setPhoneError] = useState<string | null>(null)

  useEffect(() => {
    if (user) {
      setLoadingOrders(true);
      fetch('/api/orders')
        .then(res => res.json())
        .then(data => {
          // Filtrar solo los pedidos del usuario autenticado
          const userOrders = Array.isArray(data)
            ? data.filter((order: any) => order.user && (order.user.id === user.id || order.user === user.id))
            : [];
          setOrders(userOrders);
        })
        .catch(() => setOrders([]))
        .finally(() => setLoadingOrders(false));
    }
  }, [user]);

  // Mejorar inicialización de address
  useEffect(() => {
    if (user) {
      setEditForm({
        name: user.name || "",
        email: user.email || "",
        phone: user.phone || "",
        address: {
          street: user.address?.street || "",
          city: user.address?.city || "",
          state: user.address?.state || "",
          zipCode: user.address?.zipCode || "",
          country: user.address?.country || ""
        }
      })
    }
  }, [user])

  // Cargar modo oscuro desde localStorage
  useEffect(() => {
    const savedDarkMode = localStorage.getItem('darkMode')
    if (savedDarkMode !== null) {
      const isDarkMode = savedDarkMode === 'true'
      setSettings(prev => ({ ...prev, darkMode: isDarkMode }))
      
      // Aplicar el tema al documento
      if (isDarkMode) {
        document.documentElement.classList.add('dark')
      } else {
        document.documentElement.classList.remove('dark')
      }
    }
  }, [])

  const handleSave = async () => {
    try {
      if (!user) {
        toast({
          title: "❌ Error",
          description: "Usuario no autenticado",
          variant: "destructive"
        });
        return;
      }

      // Validar campos requeridos
      if (!editForm.name.trim() || !editForm.email.trim()) {
        toast({
          title: "❌ Error",
          description: "Nombre y email son campos obligatorios",
          variant: "destructive"
        });
        return;
      }

      // Validar formato de email
      const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
      if (!emailRegex.test(editForm.email)) {
        toast({
          title: "❌ Error",
          description: "Formato de email inválido",
          variant: "destructive"
        });
        return;
      }

      // Validar formato de teléfono (opcional, pero si se ingresa debe ser válido)
      setPhoneError(null);
      if (editForm.phone.trim()) {
        const phoneRegex = /^\+?[0-9\s\-()]{7,20}$/;
        if (!phoneRegex.test(editForm.phone.trim())) {
          setPhoneError("Número de teléfono inválido. Usa solo dígitos, espacios, guiones, paréntesis y opcionalmente el prefijo +.");
          toast({
            title: "❌ Error",
            description: "Número de teléfono inválido. Usa solo dígitos, espacios, guiones, paréntesis y opcionalmente el prefijo +.",
            variant: "destructive"
          });
          return;
        }
      }

      // Validar dirección
      const { street, city, state, zipCode, country } = editForm.address;
      if (!street.trim() || !city.trim() || !state.trim() || !zipCode.trim() || !country.trim()) {
        toast({
          title: "❌ Error",
          description: "Todos los campos de dirección son obligatorios",
          variant: "destructive"
        });
        return;
      }

      // Preparar datos para actualizar
      const updateData = {
        name: editForm.name.trim(),
        email: editForm.email.trim(),
        phone: editForm.phone.trim(),
        address: {
          street: street.trim(),
          city: city.trim(),
          state: state.trim(),
          zipCode: zipCode.trim(),
          country: country.trim()
        }
      };

      setIsSaving(true);
      const result = await updateProfile(updateData);
      setIsSaving(false);
      if (result && !result.error) {
        toast({
          title: "✅ Guardado",
          description: "Perfil actualizado exitosamente",
          variant: "default"
        });
        setIsEditing(false);
      } else {
        toast({
          title: "❌ Error",
          description: result?.error || "No se pudo actualizar el perfil",
          variant: "destructive"
        });
      }
    } catch (error) {
      setIsSaving(false);
      toast({
        title: "❌ Error",
        description: "Error inesperado al guardar el perfil",
        variant: "destructive"
      });
    }
  }

  const handlePasswordChange = async () => {
    if (passwordForm.newPassword !== passwordForm.confirmPassword) {
      toast({
        title: "❌ Error",
        description: "Las contraseñas no coinciden.",
        variant: "destructive"
      });
      return;
    }
    
    if (passwordForm.newPassword.length < 6) {
      toast({
        title: "❌ Error",
        description: "La contraseña debe tener al menos 6 caracteres.",
        variant: "destructive"
      });
      return;
    }

    try {
      if (!user) {
        toast({
          title: "❌ Error",
          description: "Usuario no autenticado",
          variant: "destructive"
        });
        return;
      }

      // Llamar a la API para cambiar la contraseña
      const response = await fetch('/api/auth/change-password', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          currentPassword: passwordForm.currentPassword,
          newPassword: passwordForm.newPassword,
          userId: user?.id
        }),
      });

      const data = await response.json();
      const result = { success: response.ok, error: data.error };

      if (result.success) {
        toast({
          title: "✅ Contraseña actualizada",
          description: "Tu contraseña ha sido cambiada exitosamente.",
        });
        setShowPasswordDialog(false);
        setPasswordForm({
          currentPassword: "",
          newPassword: "",
          confirmPassword: ""
        });
      } else {
        toast({
          title: "❌ Error",
          description: result.error || "No se pudo cambiar la contraseña. Inténtalo de nuevo.",
          variant: "destructive"
        });
      }
    } catch (error) {
      console.error('Error changing password:', error);
      toast({
        title: "❌ Error",
        description: "Error de conexión al cambiar la contraseña",
        variant: "destructive"
      });
    }
  }

  const handleDeleteAccount = async () => {
    try {
      // Simular eliminación de cuenta
      await new Promise(resolve => setTimeout(resolve, 2000))
      
      toast({
        title: "✅ Cuenta eliminada",
        description: "Tu cuenta ha sido eliminada permanentemente.",
      })
      logout()
    } catch (error) {
    toast({
        title: "❌ Error",
        description: "No se pudo eliminar la cuenta. Inténtalo de nuevo.",
        variant: "destructive"
      })
    }
  }

  const handleCancel = () => {
    if (user) {
      setEditForm({
        name: user.name || "",
        email: user.email || "",
        phone: user.phone || "",
        address: user.address || {
          street: "",
          city: "",
          state: "",
          zipCode: "",
          country: ""
        }
    })
    }
    setIsEditing(false)
  }

  const handleImageChange = async (imageUrl: string) => {
    try {
      // Aquí puedes integrar con tu API para actualizar la imagen del usuario
      // Por ahora simulamos la actualización
      await new Promise(resolve => setTimeout(resolve, 1000))
      
      // Actualizar el estado del usuario con la nueva imagen usando el contexto
      const result = await updateProfile({ avatar: imageUrl })
      
      if (result.success) {
        toast({
          title: "✅ Imagen actualizada",
          description: "Tu foto de perfil ha sido actualizada exitosamente.",
        })
      } else {
        toast({
          title: "❌ Error",
          description: result.error || "No se pudo actualizar la imagen. Inténtalo de nuevo.",
          variant: "destructive"
        })
      }
    } catch (error) {
    toast({
        title: "❌ Error",
        description: "No se pudo actualizar la imagen. Inténtalo de nuevo.",
        variant: "destructive"
      })
    }
  }

  const handleDarkModeToggle = () => {
    toggleDarkMode()
    
    toast({
      title: !isDarkMode ? "🌙 Modo oscuro activado" : "☀️ Modo claro activado",
      description: `Has cambiado al ${!isDarkMode ? 'modo oscuro' : 'modo claro'}.`,
    })
  }

  const getUserInitials = (name: string) => {
    return name
      .split(" ")
      .map(n => n[0])
      .join("")
      .toUpperCase()
      .slice(0, 2)
  }

  const getMemberSince = () => {
    if (!user?.createdAt) return "Reciente"
    const date = new Date(user.createdAt)
    return date.toLocaleDateString('es-ES', { 
      year: 'numeric', 
      month: 'long', 
      day: 'numeric' 
    })
  }

  // Nueva función para guardar dirección desde AddressForm
  const handleSaveAddress = async (address: Address) => {
    try {
      if (!user) return;
      const updateData = {
        ...editForm,
        address
      };
      const result = await updateProfile(updateData);
      if (result && !result.error) {
        toast({
          title: "✅ Guardado",
          description: "Dirección actualizada exitosamente",
          variant: "default"
        });
        setIsEditing(false);
      } else {
        toast({
          title: "❌ Error",
          description: result?.error || "No se pudo actualizar la dirección",
          variant: "destructive"
        });
      }
    } catch (error) {
      toast({
        title: "❌ Error",
        description: "Error inesperado al guardar la dirección",
        variant: "destructive"
      });
    }
  };

  if (isLoading) {
    return (
      <div className="min-h-screen flex items-center justify-center bg-gradient-to-br from-purple-50 to-blue-50">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-purple-600 mx-auto mb-4"></div>
          <p className="text-gray-600 font-medium">Cargando tu perfil...</p>
        </div>
      </div>
    );
  }

  return (
    <AuthGuard>
      <div className="min-h-screen bg-gradient-to-br from-purple-50 to-blue-50">
        <div className="container mx-auto px-4 py-8">
          <div className="max-w-6xl mx-auto">
          {/* Header */}
            <div className="mb-8 text-center">
              <h1 className="text-4xl font-bold text-gray-900 mb-2">Mi Cuenta</h1>
              <p className="text-gray-600 text-lg">Gestiona tu perfil, pedidos y preferencias</p>
          </div>

            <Tabs defaultValue="profile" className="space-y-8">
              <TabsList className="grid w-full grid-cols-6 bg-white shadow-lg">
                <TabsTrigger value="profile" className="flex items-center gap-2">
                <User className="h-4 w-4" />
                  Perfil
              </TabsTrigger>
                <TabsTrigger value="orders" className="flex items-center gap-2">
                <ShoppingBag className="h-4 w-4" />
                  Pedidos
              </TabsTrigger>
                <TabsTrigger value="favorites" className="flex items-center gap-2">
                <Heart className="h-4 w-4" />
                  Favoritos
              </TabsTrigger>
                <TabsTrigger value="payments" className="flex items-center gap-2">
                <CreditCard className="h-4 w-4" />
                  Pagos
              </TabsTrigger>
                <TabsTrigger value="addresses" className="flex items-center gap-2">
                <MapPin className="h-4 w-4" />
                  Direcciones
              </TabsTrigger>
                <TabsTrigger value="settings" className="flex items-center gap-2">
                <Settings className="h-4 w-4" />
                  Configuración
                </TabsTrigger>
                <TabsTrigger value="security" className="flex items-center gap-2">
                  <Shield className="h-4 w-4" />
                  Seguridad
              </TabsTrigger>
            </TabsList>

            <TabsContent value="profile" className="space-y-6">
                <Card className="shadow-lg border-0">
                  <CardHeader className="bg-gradient-to-r from-purple-600 to-blue-600 text-white rounded-t-lg">
                  <div className="flex items-center justify-between">
                    <div>
                        <CardTitle className="text-white">Información Personal</CardTitle>
                        <CardDescription className="text-purple-100">
                        Actualiza tu información personal y de contacto
                      </CardDescription>
                    </div>
                    {!isEditing ? (
                        <Button onClick={() => setIsEditing(true)} variant="secondary" className="bg-white/20 hover:bg-white/30">
                        <Edit className="h-4 w-4 mr-2" />
                        Editar
                      </Button>
                    ) : (
                        <div className="flex gap-2">
                          <Button onClick={handleSave} size="sm" className="bg-green-600 hover:bg-green-700" disabled={isSaving}>
                          <Save className="h-4 w-4 mr-2" />
                            {isSaving ? "Guardando..." : "Guardar"}
                        </Button>
                          <Button onClick={handleCancel} variant="secondary" size="sm">
                          <X className="h-4 w-4 mr-2" />
                          Cancelar
                        </Button>
                      </div>
                    )}
                  </div>
                </CardHeader>
                  <CardContent className="p-6">
                    {/* Avatar Section */}
                    <div className="flex items-center space-x-6 mb-8">
                      <ProfileAvatar
                        currentImage={user?.avatar}
                        userName={user?.name || "Usuario"}
                        onImageChange={handleImageChange}
                        size="lg"
                        isEditing={isEditing}
                      />
                      <div className="flex-1">
                        <h3 className="text-2xl font-bold text-gray-900">{user?.name}</h3>
                        <p className="text-gray-600 flex items-center gap-2">
                          <Mail className="h-4 w-4" />
                          {user?.email}
                        </p>
                        <div className="flex items-center gap-4 mt-2">
                          {user?.isAdmin && (
                            <Badge variant="secondary" className="bg-purple-100 text-purple-800">
                              <Shield className="h-3 w-3 mr-1" />
                              Administrador
                            </Badge>
                          )}
                          <Badge variant="outline" className="text-gray-600">
                            <Calendar className="h-3 w-3 mr-1" />
                            Miembro desde {getMemberSince()}
                          </Badge>
                        </div>
                    </div>
                  </div>

                    <Separator className="my-6" />

                    {/* Form Fields */}
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                    <div className="space-y-2">
                        <Label htmlFor="name" className="text-sm font-medium">Nombre completo</Label>
                      <div className="relative">
                        <User className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4" />
                        <Input
                          id="name"
                            value={editForm.name}
                            onChange={(e) => setEditForm({ ...editForm, name: e.target.value })}
                          disabled={!isEditing}
                            className="pl-10 h-12"
                        />
                      </div>
                    </div>

                    <div className="space-y-2">
                        <Label htmlFor="email" className="text-sm font-medium">Email</Label>
                      <div className="relative">
                        <Mail className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4" />
                        <Input
                          id="email"
                          type="email"
                            value={editForm.email}
                            onChange={(e) => setEditForm({ ...editForm, email: e.target.value })}
                          disabled={!isEditing}
                            className="pl-10 h-12"
                        />
                      </div>
                    </div>

                    <div className="space-y-2">
                        <Label htmlFor="phone" className="text-sm font-medium">Teléfono</Label>
                      <div className="relative">
                        <Phone className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4" />
                        <Input
                          id="phone"
                          value={editForm.phone}
                          onChange={(e) => {
                            setEditForm({ ...editForm, phone: e.target.value });
                            setPhoneError(null);
                          }}
                          disabled={!isEditing}
                          className="pl-10 h-12"
                        />
                        {phoneError && (
                          <div className="text-red-500 text-xs mt-1">{phoneError}</div>
                        )}
                        </div>
                      </div>
                    </div>

                    {/* Address Section */}
                    <div className="space-y-4 mt-8">
                      <div className="flex items-center space-x-2">
                        <MapPin className="h-5 w-5 text-purple-600" />
                        <h4 className="font-semibold text-lg">Dirección de Envío</h4>
                      </div>
                      {isEditing ? (
                        <AddressForm
                          initialAddress={editForm.address}
                          onSave={async (address: Address) => {
                            await handleSaveAddress(address);
                          }}
                          loading={isLoading}
                          disabled={isLoading}
                        />
                      ) : (
                        <div className="space-y-1">
                          <div><strong>Calle:</strong> {user?.address?.street || "-"}</div>
                          <div><strong>Ciudad:</strong> {user?.address?.city || "-"}</div>
                          <div><strong>Provincia/Estado:</strong> {user?.address?.state || "-"}</div>
                          <div><strong>Código Postal:</strong> {user?.address?.zipCode || "-"}</div>
                          <div><strong>País:</strong> {user?.address?.country || "-"}</div>
                        </div>
                      )}
                    </div>
                  </div>
                </CardContent>
              </Card>
            </TabsContent>

            <TabsContent value="orders" className="space-y-6">
                <Card className="shadow-lg border-0">
                  <CardHeader className="bg-gradient-to-r from-green-600 to-emerald-600 text-white rounded-t-lg">
                    <CardTitle className="flex items-center text-white">
                      <ShoppingBag className="h-6 w-6 mr-3" />
                      Mis Pedidos
                    </CardTitle>
                    <CardDescription className="text-green-100">
                      Historial de todos tus pedidos y su estado
                  </CardDescription>
                </CardHeader>
                  <CardContent className="p-6">
                    {loadingOrders ? (
                      <div className="text-center py-12">
                        <div className="animate-spin rounded-full h-10 w-10 border-b-2 border-green-600 mx-auto mb-4"></div>
                        <p className="text-gray-600">Cargando pedidos...</p>
                      </div>
                    ) : orders.length > 0 ? (
                      <div className="space-y-6">
                        {orders.map((order) => (
                          <div key={order.id} className="border rounded-lg p-4 bg-gray-50">
                            <div className="flex flex-col md:flex-row md:items-center md:justify-between gap-2 mb-2">
                              <div>
                                <span className="font-semibold">Pedido:</span> {order.orderNumber || order.id}
                                <span className="ml-4 font-semibold">Fecha:</span> {order.createdAt ? new Date(order.createdAt).toLocaleDateString() : 'N/A'}
                              </div>
                              <div>
                                <Badge variant="outline" className="capitalize">
                                  {order.status}
                                </Badge>
                                {order.isPaid && <Badge variant="secondary" className="ml-2">Pagado</Badge>}
                              </div>
                            </div>
                            <div className="overflow-x-auto">
                              <table className="min-w-full text-sm">
                                <thead>
                                  <tr>
                                    <th className="text-left p-2">Producto</th>
                                    <th className="text-left p-2">Cantidad</th>
                                    <th className="text-left p-2">Precio</th>
                                  </tr>
                                </thead>
                                <tbody>
                                  {order.items.map((item: any, idx: number) => (
                                    <tr key={idx}>
                                      <td className="p-2 flex items-center gap-2">
                                        <img src={item.image || (item.product && item.product.images && item.product.images[0]) || '/placeholder.svg'} alt={item.name} className="w-10 h-10 object-cover rounded" />
                                        <span>{item.name || (item.product && item.product.name)}</span>
                                      </td>
                                      <td className="p-2">{item.quantity}</td>
                                      <td className="p-2">${item.price.toFixed(2)}</td>
                                    </tr>
                                  ))}
                                </tbody>
                              </table>
                            </div>
                            <div className="flex justify-end mt-2">
                              <span className="font-semibold">Total: ${order.total?.toFixed(2) || 'N/A'}</span>
                            </div>
                            {/* Detalles adicionales del pedido */}
                            <div className="mt-4 bg-white rounded p-4 border text-sm space-y-1">
                              <div><span className="font-semibold">Dirección de envío:</span> {order.shippingAddress ? `${order.shippingAddress.street}, ${order.shippingAddress.city}, ${order.shippingAddress.state}, ${order.shippingAddress.zipCode}, ${order.shippingAddress.country}` : '-'}</div>
                              <div><span className="font-semibold">Método de pago:</span> {order.payment || '-'}</div>
                              <div><span className="font-semibold">Email de contacto:</span> {order.email || '-'}</div>
                              <div><span className="font-semibold">Teléfono:</span> {order.phone || '-'}</div>
                            </div>
                          </div>
                        ))}
                      </div>
                    ) : (
                      <div className="text-center py-12">
                        <div className="bg-green-100 rounded-full p-6 w-24 h-24 mx-auto mb-6 flex items-center justify-center">
                          <ShoppingBag className="h-12 w-12 text-green-600" />
                        </div>
                        <h3 className="text-2xl font-bold text-gray-900 mb-3">No hay pedidos aún</h3>
                        <p className="text-gray-600 mb-6 max-w-md mx-auto">
                          Cuando hagas tu primer pedido, aparecerá aquí con todos los detalles y el estado de seguimiento.
                        </p>
                        <Link href="/shop">
                          <Button size="lg" className="bg-green-600 hover:bg-green-700">
                            <ShoppingBag className="h-5 w-5 mr-2" />
                            Ir a la Tienda
                          </Button>
                        </Link>
                      </div>
                    )}
                  </CardContent>
                </Card>
            </TabsContent>

            <TabsContent value="favorites" className="space-y-6">
                <Card className="shadow-lg border-0">
                  <CardHeader className="bg-gradient-to-r from-pink-600 to-rose-600 text-white rounded-t-lg">
                    <CardTitle className="flex items-center text-white">
                      <Heart className="h-6 w-6 mr-3" />
                      Mis Favoritos
                    </CardTitle>
                    <CardDescription className="text-pink-100">
                      Productos que has marcado como favoritos
                      </CardDescription>
                </CardHeader>
                  <CardContent className="p-6">
                    {favorites && favorites.length > 0 ? (
                      <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6">
                        {getFavoriteProducts().map((product) => (
                          <ProductCard key={product.id} product={product} />
                        ))}
                    </div>
                  ) : (
                      <div className="text-center py-12">
                        <div className="bg-pink-100 rounded-full p-6 w-24 h-24 mx-auto mb-6 flex items-center justify-center">
                          <Heart className="h-12 w-12 text-pink-600" />
                        </div>
                        <h3 className="text-2xl font-bold text-gray-900 mb-3">No hay favoritos aún</h3>
                        <p className="text-gray-600 mb-6 max-w-md mx-auto">
                          Marca productos como favoritos para verlos aquí y acceder rápidamente a ellos.
                        </p>
                        <Link href="/shop">
                          <Button size="lg" className="bg-pink-600 hover:bg-pink-700">
                            <Heart className="h-5 w-5 mr-2" />
                            Explorar Productos
                          </Button>
                        </Link>
                    </div>
                  )}
                </CardContent>
              </Card>
            </TabsContent>

            <TabsContent value="payments" className="space-y-6">
  <Card className="shadow-lg border-0">
    <CardHeader className="bg-gradient-to-r from-indigo-600 to-purple-600 text-white rounded-t-lg">
      <CardTitle className="flex items-center text-white">
        <CreditCard className="h-6 w-6 mr-3" />
        Métodos de Pago
      </CardTitle>
      <CardDescription className="text-indigo-100">
        Gestiona tus tarjetas y métodos de pago guardados
      </CardDescription>
    </CardHeader>
    <CardContent className="p-6">
      <h3 className="text-lg font-semibold text-gray-900 mb-4">Tus métodos de pago</h3>
      <PaymentMethodList />
    </CardContent>
  </Card>
</TabsContent>

            <TabsContent value="addresses" className="space-y-6">
  <Card className="shadow-lg border-0">
    <CardHeader className="bg-gradient-to-r from-indigo-600 to-purple-600 text-white rounded-t-lg">
      <CardTitle className="flex items-center text-white">
        <MapPin className="h-6 w-6 mr-3" />
        Direcciones de Envío
      </CardTitle>
      <CardDescription className="text-indigo-100">
        Gestiona tus direcciones guardadas
      </CardDescription>
    </CardHeader>
    <CardContent className="p-6">
      <h3 className="text-lg font-semibold text-gray-900 mb-4">Tus direcciones</h3>
      <AddressList />
    </CardContent>
  </Card>
</TabsContent>

            <TabsContent value="settings" className="space-y-6">
                <Card className="shadow-lg border-0">
                  <CardHeader className="bg-gradient-to-r from-blue-600 to-indigo-600 text-white rounded-t-lg">
                    <CardTitle className="flex items-center text-white">
                      <Settings className="h-6 w-6 mr-3" />
                      Configuración de Notificaciones
                    </CardTitle>
                    <CardDescription className="text-blue-100">
                      Gestiona cómo recibes las notificaciones
                    </CardDescription>
                  </CardHeader>
                  <CardContent className="p-6 space-y-6">
                    <div className="flex items-center justify-between p-4 border rounded-lg hover:bg-gray-50 transition-colors">
                      <div className="flex items-center space-x-3">
                        <div className="bg-blue-100 p-2 rounded-lg">
                          <Bell className="h-5 w-5 text-blue-600" />
                        </div>
                        <div>
                          <h4 className="font-semibold">Notificaciones por email</h4>
                          <p className="text-sm text-gray-600">Recibe actualizaciones sobre tus pedidos</p>
                        </div>
                      </div>
                      <Switch
                        checked={settings.emailNotifications}
                        onCheckedChange={(checked) => setSettings({...settings, emailNotifications: checked})}
                      />
                    </div>
                    
                    <div className="flex items-center justify-between p-4 border rounded-lg hover:bg-gray-50 transition-colors">
                      <div className="flex items-center space-x-3">
                        <div className="bg-green-100 p-2 rounded-lg">
                          <Phone className="h-5 w-5 text-green-600" />
                        </div>
                        <div>
                          <h4 className="font-semibold">Notificaciones SMS</h4>
                          <p className="text-sm text-gray-600">Recibe alertas por mensaje de texto</p>
                        </div>
                      </div>
                      <Switch
                        checked={settings.smsNotifications}
                        onCheckedChange={(checked) => setSettings({...settings, smsNotifications: checked})}
                      />
                    </div>

                    <div className="flex items-center justify-between p-4 border rounded-lg hover:bg-gray-50 transition-colors">
                      <div className="flex items-center space-x-3">
                        <div className="bg-purple-100 p-2 rounded-lg">
                          <Mail className="h-5 w-5 text-purple-600" />
                        </div>
                      <div>
                          <h4 className="font-semibold">Emails de marketing</h4>
                          <p className="text-sm text-gray-600">Recibe ofertas y novedades</p>
                        </div>
                      </div>
                      <Switch
                        checked={settings.marketingEmails}
                        onCheckedChange={(checked) => setSettings({...settings, marketingEmails: checked})}
                      />
                    </div>

                    <div className="flex items-center justify-between p-4 border rounded-lg hover:bg-gray-50 transition-colors">
                      <div className="flex items-center space-x-3">
                        <div className="bg-orange-100 p-2 rounded-lg">
                          <Package className="h-5 w-5 text-orange-600" />
                        </div>
                      <div>
                          <h4 className="font-semibold">Actualizaciones de pedidos</h4>
                          <p className="text-sm text-gray-600">Seguimiento en tiempo real</p>
                        </div>
                      </div>
                      <Switch
                        checked={settings.orderUpdates}
                        onCheckedChange={(checked) => setSettings({...settings, orderUpdates: checked})}
                      />
                    </div>

                    <div className="flex items-center justify-between p-4 border rounded-lg hover:bg-gray-50 dark:hover:bg-gray-800/50 transition-all duration-300 bg-gradient-to-r from-gray-50 to-gray-100 dark:from-gray-800/50 dark:to-gray-700/50">
                      <div className="flex items-center space-x-3">
                        <div className="bg-gradient-to-r from-gray-200 to-gray-300 dark:from-gray-700 dark:to-gray-600 p-3 rounded-xl shadow-md">
                          {isDarkMode ? (
                            <Sun className="h-6 w-6 text-yellow-500" />
                          ) : (
                            <Moon className="h-6 w-6 text-gray-600 dark:text-gray-300" />
                          )}
                        </div>
                        <div>
                          <h4 className="font-semibold text-gray-900 dark:text-gray-100">Modo oscuro</h4>
                          <p className="text-sm text-gray-600 dark:text-gray-400">
                            {isDarkMode ? "Activa el modo claro para una experiencia más brillante" : "Activa el modo oscuro para una experiencia más suave"}
                          </p>
                        </div>
                      </div>
                      <div className="relative">
                        <Switch
                          checked={isDarkMode}
                          onCheckedChange={handleDarkModeToggle}
                          className="data-[state=checked]:bg-gradient-to-r data-[state=checked]:from-purple-500 data-[state=checked]:to-blue-500"
                        />
                        <div className="absolute -top-1 -right-1 w-3 h-3 bg-gradient-to-r from-purple-400 to-blue-400 rounded-full opacity-0 transition-opacity duration-300 pointer-events-none"></div>
                      </div>
                    </div>
                  </CardContent>
                </Card>
              </TabsContent>

              <TabsContent value="security" className="space-y-6">
                <Card className="shadow-lg border-0">
                  <CardHeader className="bg-gradient-to-r from-red-600 to-pink-600 text-white rounded-t-lg">
                    <CardTitle className="flex items-center text-white">
                      <Shield className="h-6 w-6 mr-3" />
                      Seguridad de la Cuenta
                    </CardTitle>
                    <CardDescription className="text-red-100">
                      Gestiona la seguridad de tu cuenta
                    </CardDescription>
                  </CardHeader>
                  <CardContent className="p-6 space-y-6">
                    <div className="flex items-center justify-between p-4 border rounded-lg hover:bg-gray-50 transition-colors">
                      <div className="flex items-center space-x-3">
                        <div className="bg-blue-100 p-2 rounded-lg">
                          <Lock className="h-5 w-5 text-blue-600" />
                        </div>
                        <div>
                          <h4 className="font-semibold">Cambiar contraseña</h4>
                          <p className="text-sm text-gray-600">Actualiza tu contraseña de seguridad</p>
                        </div>
                      </div>
                      <Dialog open={showPasswordDialog} onOpenChange={setShowPasswordDialog}>
                        <DialogTrigger asChild>
                          <Button variant="outline" size="sm">
                            Cambiar
                          </Button>
                        </DialogTrigger>
                        <DialogContent className="sm:max-w-md">
                          <DialogHeader>
                            <DialogTitle>Cambiar Contraseña</DialogTitle>
                            <DialogDescription>
                              Ingresa tu contraseña actual y la nueva contraseña.
                            </DialogDescription>
                          </DialogHeader>
                          <div className="space-y-4">
                            <div className="space-y-2">
                              <Label htmlFor="currentPassword">Contraseña actual</Label>
                              <div className="relative">
                                <Input
                                  id="currentPassword"
                                  type={showPassword.current ? "text" : "password"}
                                  value={passwordForm.currentPassword}
                                  onChange={(e) => setPasswordForm({...passwordForm, currentPassword: e.target.value})}
                                  className="pr-10"
                                />
                                <Button
                                  type="button"
                                  variant="ghost"
                                  size="sm"
                                  className="absolute right-0 top-0 h-full px-3 py-2 hover:bg-transparent"
                                  onClick={() => setShowPassword({...showPassword, current: !showPassword.current})}
                                >
                                  {showPassword.current ? <EyeOff className="h-4 w-4" /> : <Eye className="h-4 w-4" />}
                                </Button>
                              </div>
                            </div>
                            <div className="space-y-2">
                              <Label htmlFor="newPassword">Nueva contraseña</Label>
                              <div className="relative">
                                <Input
                                  id="newPassword"
                                  type={showPassword.new ? "text" : "password"}
                                  value={passwordForm.newPassword}
                                  onChange={(e) => setPasswordForm({...passwordForm, newPassword: e.target.value})}
                                  className="pr-10"
                                />
                                <Button
                                  type="button"
                                  variant="ghost"
                                  size="sm"
                                  className="absolute right-0 top-0 h-full px-3 py-2 hover:bg-transparent"
                                  onClick={() => setShowPassword({...showPassword, new: !showPassword.new})}
                                >
                                  {showPassword.new ? <EyeOff className="h-4 w-4" /> : <Eye className="h-4 w-4" />}
                                </Button>
                              </div>
                            </div>
                            <div className="space-y-2">
                              <Label htmlFor="confirmPassword">Confirmar nueva contraseña</Label>
                              <div className="relative">
                                <Input
                                  id="confirmPassword"
                                  type={showPassword.confirm ? "text" : "password"}
                                  value={passwordForm.confirmPassword}
                                  onChange={(e) => setPasswordForm({...passwordForm, confirmPassword: e.target.value})}
                                  className="pr-10"
                                />
                                <Button
                                  type="button"
                                  variant="ghost"
                                  size="sm"
                                  className="absolute right-0 top-0 h-full px-3 py-2 hover:bg-transparent"
                                  onClick={() => setShowPassword({...showPassword, confirm: !showPassword.confirm})}
                                >
                                  {showPassword.confirm ? <EyeOff className="h-4 w-4" /> : <Eye className="h-4 w-4" />}
                                </Button>
                              </div>
                            </div>
                          </div>
                          <DialogFooter>
                            <Button variant="outline" onClick={() => setShowPasswordDialog(false)}>
                              Cancelar
                            </Button>
                            <Button onClick={handlePasswordChange}>
                              Cambiar Contraseña
                            </Button>
                          </DialogFooter>
                        </DialogContent>
                      </Dialog>
                    </div>

                    <div className="flex items-center justify-between p-4 border rounded-lg hover:bg-gray-50 transition-colors">
                      <div className="flex items-center space-x-3">
                        <div className="bg-red-100 p-2 rounded-lg">
                          <Trash2 className="h-5 w-5 text-red-600" />
                        </div>
                      <div>
                          <h4 className="font-semibold">Eliminar cuenta</h4>
                          <p className="text-sm text-gray-600">Elimina permanentemente tu cuenta</p>
                        </div>
                      </div>
                      <Dialog open={showDeleteDialog} onOpenChange={setShowDeleteDialog}>
                        <DialogTrigger asChild>
                          <Button variant="destructive" size="sm">
                            Eliminar
                          </Button>
                        </DialogTrigger>
                        <DialogContent>
                          <DialogHeader>
                            <DialogTitle>¿Estás seguro?</DialogTitle>
                            <DialogDescription>
                              Esta acción no se puede deshacer. Se eliminará permanentemente tu cuenta y todos tus datos.
                            </DialogDescription>
                          </DialogHeader>
                          <DialogFooter>
                            <Button variant="outline" onClick={() => setShowDeleteDialog(false)}>
                              Cancelar
                            </Button>
                            <Button variant="destructive" onClick={handleDeleteAccount}>
                              Sí, eliminar cuenta
                            </Button>
                          </DialogFooter>
                        </DialogContent>
                      </Dialog>
                    </div>

                    <div className="flex items-center justify-between p-4 border rounded-lg hover:bg-gray-50 transition-colors">
                      <div className="flex items-center space-x-3">
                        <div className="bg-gray-100 p-2 rounded-lg">
                          <LogOut className="h-5 w-5 text-gray-600" />
                        </div>
                      <div>
                          <h4 className="font-semibold">Cerrar sesión</h4>
                          <p className="text-sm text-gray-600">Cierra tu sesión actual</p>
                        </div>
                      </div>
                      <Button variant="outline" size="sm" onClick={logout}>
                        Cerrar Sesión
                      </Button>
                    </div>
                  </CardContent>
                </Card>
            </TabsContent>
          </Tabs>
        </div>
      </div>
    </AuthGuard>
  )
}
